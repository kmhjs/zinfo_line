#
# This function parses first command name of input command query.
# Note that, this function ignores heading spaces.
#
function _zinfo_line::parse_lastcmd()
{
  local -a query=(${(s: :)${1}})

  echo ${query[1]}
}

#
# This function returns formatted date for information line
#
function _zinfo_line::formatted_date()
{
  date '+%Y/%m/%d-%H:%M:%S'
}

#
# This function returns load average for macos
#
function _zinfo_line::macos_load_average()
{
  sysctl -n vm.loadavg | sed 's!^{ !!;s! }!!'
}

#
# This function returns load average for Linux
#
function _zinfo_line::linux_load_average()
{
  cat /proc/loadavg | cut -d' ' -f1,2,3
}

#
# This function returns formatted date info of load average
#
function _zinfo_line::formatted_load_average()
{
  case ${OSTYPE} in
    darwin*) _zinfo_line::macos_load_average ;;
    *)       _zinfo_line::linux_load_average ;;
  esac
}

#
# This function returns boot time in Unix time for macos
#
function _zinfo_line::macos_uptime_sec()
{
  sysctl -n kern.boottime | sed 's!^.* sec = \([0-9]*\), .*$!\1!'
}

#
# This function returns boot time in Unix time for Linux
#
function _zinfo_line::linux_uptime_sec()
{
  date +%s -d "now - $(cut -d. -f1 /proc/uptime) sec"
}

#
# This function returns formatted date info of uptime
#
function _zinfo_line::formatted_uptime()
{
  local -i uptime_sec

  case ${OSTYPE} in
    darwin*) uptime_sec=$(_zinfo_line::macos_uptime_sec) ;;
    *)       uptime_sec=$(_zinfo_line::linux_uptime_sec) ;;
  esac

  local -i uptime_days=$((($(date +%s) - ${uptime_sec}) / 86400))
  echo "${uptime_days} days"
}

#
# This function returns macOS battery information
#
function _zinfo_line::macos_battery_info()
{
  # Here, echo reduces unnecessary linebreaks
  if [[ -x $(which pmset) ]]
  then
    echo $(pmset -g batt | egrep -wo '([0-9]*%|[0-9]*:[0-9]*)')
  fi
}

function _zinfo_line::linux_battery_info()
{
  # TODO: Clean up following task
  if [[ -x $(which acpi) ]]
  then
    acpi -b        |
      grep Battery |
      head -1      |
      sed 's/[^,]*[^0-9]*\([0-9]*%\)[^0-9]*\([0-9:]*\).*/\1 \2/g'
  fi
}

function _zinfo_line::formatted_battery_info()
{
  case ${OSTYPE} in
    darwin*) _zinfo_line::macos_battery_info ;;
    *)       _zinfo_line::linux_battery_info ;;
  esac
}

function zinfo_line()
{
  # Exceptions (Commands to be ignored)
  local -a exceptions=(${(s@:@)${ZMIDLINE_IGN_COMMAND}})

  # If exceptions array contains last command, ignore.
  local s_cmd=$(_zinfo_line::parse_lastcmd ${1})
  if [[ ${exceptions[(I)$s_cmd]} != 0 ]]
  then
    return 1
  fi

  # Symbols
  local -A separators=()
  separators['date-cmd']=' : '
  separators['cmd-line']=' '
  separators['top-batt']=' / '

  local heading_symbol='> '

  local -A right_info_symbols=()
  right_info_symbols['head']='('
  right_info_symbols['tail']=')'

  # Flags. Show element or not
  local -A enable_flags=()
  enable_flags['last_command_info']=0
  enable_flags['last_command_date_info']=0
  enable_flags['acpi_info']=0
  enable_flags['load_info']=0
  enable_flags['subinfo_separator']=0
  enable_flags['load-battery_separator']=0

  # Date string
  local s_date=$(_zinfo_line::formatted_date)

  # Load value
  local s_load="{$(_zinfo_line::formatted_uptime) | $(_zinfo_line::formatted_load_average)}"

  # battery info
  local s_acpi=$(_zinfo_line::formatted_battery_info)

  # Intialize whole line length
  local -i terminal_width=${COLUMNS}

  #
  # States
  #
  # Small
  #  |
  #  | > command
  #  | > date : command
  #  | > date : command (battery)
  #  | > date : command (load / battery)
  #  | > date : command ----- (load / battery)
  #  |
  #  V
  # Large
  #
  # * left_info  : `> date : command`
  # * right_info : `(load / battery)`
  #

  # Compute left info
  ## Compute available length and features
  terminal_width=$((${terminal_width} - ${#s_cmd} - ${#heading_symbol}))
  if (( ${terminal_width} >= 0 ))
  then
    enable_flags['last_command_info']=1
  fi

  terminal_width=$((${terminal_width} - ${#s_date} - ${#separators['date-cmd']}))
  if (( ${terminal_width} >= 0 ))
  then
    enable_flags['last_command_date_info']=1
  fi

  ## Build left info
  local left_info=''

  if [[ ${enable_flags['last_command_info']} == 1 ]]
  then
    left_info+=${heading_symbol}
  fi

  if [[ ${enable_flags['last_command_date_info']} == 1 ]]
  then
    left_info+=${fg[gray]}${s_date}${fg[default]}${separators['date-cmd']}
  fi

  if [[ ${enable_flags['last_command_info']} == 1 ]]
  then
    left_info+=${fg[green]}${s_cmd}${fg[default]}
  fi


  # Compute right info
  ## Compute available length and features
  if [[ -n ${s_acpi} ]]
  then
    local right_info_separator="${right_info_symbols['head']}${right_info_symbols['tail']}"
    terminal_width=$((${terminal_width} - ${#s_acpi} - ${#right_info_separator}))
    if (( ${terminal_width} >= 0 ))
    then
      enable_flags['acpi_info']=1
      enable_flags['subinfo_separator']=1
    fi
  fi

  terminal_width=$((${terminal_width} - ${#s_load} - ${#separators['top-batt']}))
  if (( ${terminal_width} >= 0 ))
  then
    enable_flags['load_info']=1
    enable_flags['load-battery_separator']=1
  fi

  ## Build right info
  local right_info=''

  if [[ ${enable_flags['subinfo_separator']} == 1 ]]
  then
    right_info+=${right_info_symbols['head']}
  fi

  if [[ ${enable_flags['load_info']} == 1 ]]
  then
    right_info+=${fg[gray]}${s_load}${fg[default]}
  fi

  if [[ ${enable_flags['load-battery_separator']} == 1 ]]
  then
    right_info+=${separators['top-batt']}
  fi

  if [[ ${enable_flags['acpi_info']} == 1 ]]
  then
    right_info+=${fg[gray]}${s_acpi}${fg[default]}
  fi

  if [[ ${enable_flags['subinfo_separator']} == 1 ]]
  then
    right_info+=${right_info_symbols['tail']}
  fi


  # Create separator line
  local line_separator="${separators['cmd-line']}${separators['cmd-line']}"
  local minimum_length=1
  local middle_line=''
  if (( ${terminal_width} >= ${#line_separator} + ${minimum_length} ))
  then
    terminal_width=$((${terminal_width} - ${#line_separator}))
    middle_line=${separators['cmd-line']}${fg[blue]}${(l.${terminal_width}..-.)}${fg[default]}${separators['cmd-line']}
  fi


  # Show
  echo "${left_info}${middle_line}${right_info}"
}
